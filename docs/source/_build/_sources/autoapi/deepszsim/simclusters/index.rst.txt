deepszsim.simclusters
=====================

.. py:module:: deepszsim.simclusters


Classes
-------

.. autoapisummary::

   deepszsim.simclusters.simulate_clusters


Module Contents
---------------

.. py:class:: simulate_clusters(M200=None, redshift_z=None, num_halos=None, halo_params_dict=None, R200_Mpc=None, profile='Battaglia2012', image_size_pixels=None, image_size_arcmin=None, pixel_size_arcmin=None, alpha=1.0, gamma=-0.3, load_vars_yaml=os.path.join(os.path.dirname(__file__), 'Settings', 'config_simACTDR5.yaml'), seed=None, tqverb=False)

   .. py:attribute:: clusters


   .. py:attribute:: profile
      :value: 'Battaglia2012'



   .. py:attribute:: image_size_pixels


   .. py:attribute:: image_size_arcmin


   .. py:attribute:: pixel_size_arcmin


   .. py:attribute:: beam_size_arcmin


   .. py:attribute:: cosmo


   .. py:attribute:: tqverb


   .. py:attribute:: id_list


   .. py:method:: get_y_maps()

      Returns
      -------
      np.ndarray(float)
          self._size many maps of the Compton `y` value, each of which is image_size_pixels x image_size_pixels in size



   .. py:method:: get_dT_maps()

      Returns
      -------
      np.ndarray(float)
          self._size many maps of the dT values in units of uK, each of which is image_size_pixels x
          image_size_pixels in size



   .. py:method:: get_T_maps(add_CMB=True, returnval=False)

      Parameters
      ----------
      add_CMB: bool
          whether or not to include the CMB contribution to the final map
      returnval: bool
          whether or not to return the T maps themselves or simply update internal attribute

      Returns
      -------
      np.ndarray(float)
          self._size many maps of the sky in units of uK, each of which is image_size_pixels x image_size_pixels in
          size



   .. py:method:: ith_T_map(i, add_CMB=True)

      Parameters
      ----------
      i: int
          the map you want to return
      add_CMB: bool
          whether or not to include the CMB contribution to the final map

      Returns
      -------
      np.ndarray(float)
          the ith map of the sky in units of uK, which is image_size_pixels x image_size_pixels in size



   .. py:method:: save_map(i=None, nest_h5=True, nest_name=None, savedir=os.path.join(os.path.dirname(__file__), 'outfiles'))

      Parameters
      ----------
      i: None or int
          the map you want to save, if you only want to save a single map
      nest_h5: bool
          whether or not to nest the clusters into a single h5 file, assuming that you are saving all of the
          clusters that you have calculated
      nest_name: None or str
          a name for the overall file if you are nesting them (otherwise, it will name it with the number of
          clusters plus the date plus a random string)
      savedir: str
          the path to the directory you want to save into



