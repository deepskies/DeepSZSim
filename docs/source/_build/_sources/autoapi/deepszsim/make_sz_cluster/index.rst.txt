deepszsim.make_sz_cluster
=========================

.. py:module:: deepszsim.make_sz_cluster

.. autoapi-nested-parse::

   pressure profile, Compton-y, R200, C200 and temperature submap generating functions based on halo redshift and mass information



Attributes
----------

.. autoapisummary::

   deepszsim.make_sz_cluster.keVcm3_to_Jm3
   deepszsim.make_sz_cluster.thermal_to_electron_pressure
   deepszsim.make_sz_cluster.Mpc_to_m
   deepszsim.make_sz_cluster.Thomson_scale


Functions
---------

.. autoapisummary::

   deepszsim.make_sz_cluster._param_Battaglia2012
   deepszsim.make_sz_cluster._P0_Battaglia2012
   deepszsim.make_sz_cluster._xc_Battaglia2012
   deepszsim.make_sz_cluster._beta_Battaglia2012
   deepszsim.make_sz_cluster.P200_Battaglia2012
   deepszsim.make_sz_cluster._Pth_Battaglia2012
   deepszsim.make_sz_cluster.Pth_Battaglia2012
   deepszsim.make_sz_cluster.Pe_to_y
   deepszsim.make_sz_cluster._make_y_submap
   deepszsim.make_sz_cluster.generate_y_submap
   deepszsim.make_sz_cluster.get_r200_angsize_and_c200


Module Contents
---------------

.. py:data:: keVcm3_to_Jm3

.. py:data:: thermal_to_electron_pressure

.. py:data:: Mpc_to_m

.. py:data:: Thomson_scale

.. py:function:: _param_Battaglia2012(A0, alpha_m, alpha_z, M200_SM, redshift_z)

   Calculates independent params using the formula from Battaglia 2012, Equation 11
   in order for use in the pressure profile defined in Equation 10

   Parameters:
   -----------
   A0: float
       normalization factor
   alpha_m: float
       power law index for the mass-dependent part of the function
   alpha_z: float
       power law index for the redshift dependent part
   M200_SM: float
       the mass of the cluster at 200 times the critical density of the 
       universe in units of solar masses
   redshift_z: float
       the redshift of the cluster

   Returns:
   --------
   A: float
       the parameter A given the formula from Battaglia 2012, Eq 11


.. py:function:: _P0_Battaglia2012(M200_SM, redshift_z)

   Calculates P0, the normalization factor/amplitude, 
   from Battaglia 2012, using the values from Table 1,

   Parameters:
   -----------
   M200_SM: float
       the mass of the cluster at 200 times the critical density of the 
       universe, in units of solar masses
   redshift_z: float
       the redshift of the cluster (unitless)

   Returns:
   -------
   P0: float
       the normalization factor for the Battaglia 2012 profile



.. py:function:: _xc_Battaglia2012(M200_SM, redshift_z)

   Calculates xc, the core-scale factor,
   from Battaglia 2012, using the values from Table 1,

   Parameters:
   -----------
   M200_SM: float
       the mass of the cluster at 200 times the critical density of the 
       universe, in units of solar masses
   redshift_z: float
       the redshift of the cluster (unitless)

   Returns:
   --------
   xc: float
       the core-scale factor for the Battaglia 2012 profile



.. py:function:: _beta_Battaglia2012(M200_SM, redshift_z)

   Calculates beta, the power law index, 
   from Battaglia 2012, using the values from Table 1,

   Parameters:
   ----------
   M200_SM: float
       the mass of the cluster at 200 times the critical density of the 
       universe, in units of solar masses
   redshift_z: float
       the redshift of the cluster (unitless)

   Returns:
   -------
   beta: float
       the power law index for the Battaglia 2012 profile



.. py:function:: P200_Battaglia2012(M200_SM, redshift_z, load_vars_dict, R200_Mpc=None)

   Calculates the P200 pressure of a cluster, as defined in
   Battaglia 2012

   Parameters:
   -----------
   M200_SM: float
       the mass contained within R200, in units of solar masses
   redshift_z: float
       the redshift of the cluster (unitless)
   load_vars_dict: instance of load_vars.load_vars()
       dictionary that includes background cosmology, ns, and sigma8 (necessary for the
       calculation of R200 and c200)
   R200_Mpc: None or float
       if None, will calculate the radius that corresponds to the mass M200, the redshift redshift_z,
       and the cosmology contained in load_vars_dict

   Returns:
   --------
   P200_kevcm3: Quantity instance
       the thermal pressure of the shell defined by R200 in units
       of keV/cm**3


.. py:function:: _Pth_Battaglia2012(P0, radius_mpc, R200_Mpc, alpha, beta, gamma, xc)

   Calculates the Pth profile using the Battaglia profile, Battaglia 2012,
   Equation 10. Pth is unitless. It is normalized by P200

   Parameters:
   -----------
   P0: float
       the normalization factor/amplitude,
   radius_mpc: float or np.ndarray(float)
       the radius or radii for the pressure to be calculated at, in units of Mpc
   R200_Mpc: float
       the radius of the cluster at 200 times the critical density of the
       universe, in units of Mpc
   alpha: float
       fixed parameter equal to 1.0 in Battaglia 2012
   beta: float
       power law index
   gamma: float
       fixed paremeter equal to -0.3 in Battaglia 2012
   xc: float
       core-scale radius

   Returns:
   --------
   Pth: float or np.ndarray(float)
       the thermal pressure profile normalized by P200 (which itself has units of
       keV/cm**3)


.. py:function:: Pth_Battaglia2012(radius_mpc, M200_SM, redshift_z, load_vars_dict=None, alpha=1.0, gamma=-0.3, R200_Mpc=None)

   Calculates the Pth profile using the Battaglia profile, Battaglia 2012,
   Equation 10. Pth is unitless. It is normalized by P200

   Parameters:
   -----------
   radius_mpc: float or np.ndarray(float)
       the radius for the pressure to be calculated at, in units of Mpc
   M200_SM: float
       the mass contained within R200, in units of solar masses
   redshift_z: float
       the redshift of the cluster (unitless)
   load_vars_dict: instance of load_vars.load_vars()
       dictionary that includes background cosmology, ns, and sigma8 (necessary for the
       calculation of R200 and c200)
   alpha: float
       variable fixed by Battaglia et al 2012 to 1.0
   gamma: float
       variable fixed by Battaglia et al 2012 to -0.3
   R200_Mpc: None or float
       if None, will calculate the radius that corresponds to the mass M200, the redshift redshift_z,
       and the cosmology contained in load_vars_dict

   Returns:
   --------
   Pth: float or np.ndarray(float)
       the thermal pressure profile normalized by P200 (which itself has units of
       keV/cm**3)


.. py:function:: Pe_to_y(profile, radii_mpc, M200_SM, redshift_z, load_vars_dict, alpha=1.0, gamma=-0.3, R200_Mpc=None)

   Converts from an electron pressure profile to a compton-y profile,
   integrates over line of sight from -1 to 1 Mpc relative to center.

   Parameters:
   -----------
   profile: method
       Method to get thermal pressure profile, accepts radius, M200, redshift_z, cosmo,
       and two additional parameters alpha and gamma that are usually fixed
   radii_mpc: array
       the array of radii corresponding to the profile in Mpc
   M200_SM: float
       the mass contained within R200, in units of solar masses
   redshift_z: float
       the redshift of the cluster (unitless)
   load_vars_dict: instance of load_vars.load_vars()
       dictionary that includes background cosmology, ns, and sigma8 (necessary for the
       calculation of R200 and c200)
   alpha: float
       variable fixed by Battaglia et al 2012 to 1.0
   gamma: float
       variable fixed by Battaglia et al 2012 to -0.3
   R200_Mpc: None or float
       if None, will calculate the radius that corresponds to the mass M200, the redshift redshift_z,
       and the cosmology contained in load_vars_dict

   Return:
   -------
   y_pro: array
       Compton-y profile corresponding to the radii


.. py:function:: _make_y_submap(profile, M200_SM, redshift_z, load_vars_dict, image_size_pixels, pixel_size_arcmin, alpha=1.0, gamma=-0.3, R200_Mpc=None)

   Converts from an electron pressure profile to a compton-y profile,
   integrates over line of sight from -1 to 1 Mpc relative to center.

   Parameters:
   -----------
   profile:
       Method to get thermal pressure profile in Kev/cm^3, accepts radius,
           R200 and **kwargs
   M200_SM: float
       mass contained in R200, in units of solar masses
   redshift_z: float
       the redshift of the cluster (unitless)
   load_vars_dict: instance of load_vars.load_vars()
       dictionary that includes background cosmology, ns, and sigma8 (necessary for the
       calculation of R200 and c200)
   image_size_pixels: int
       size of final submap in number of pixels
   pixel_size_arcmin: float
       size of each pixel in arcmin
   alpha: float
       variable fixed by Battaglia et al 2012 to 1.0
   gamma: float
       variable fixed by Battaglia et al 2012 to -0.3
   R200_Mpc: None or float
       if None, will calculate the radius that corresponds to the mass M200, the redshift redshift_z,
       and the cosmology contained in load_vars_dict

   Return:
   -------
   y_map: array
       Compton-y submap with shape (image_size_pixels, image_size_pixels)


.. py:function:: generate_y_submap(M200_SM, redshift_z, profile='Battaglia2012', image_size_pixels=None, pixel_size_arcmin=None, load_vars_dict=None, alpha=1.0, gamma=-0.3, R200_Mpc=None)

   Converts from an electron pressure profile to a compton-y profile,
   integrates over line of sight from -1 to 1 Mpc relative to center.

   Parameters:
   ----------
   M200_SM:
       the mass contained within R200 in solar masses
   redshift_z: float
       the redshift of the cluster (unitless)
   profile: str
       name of profile, currently only supports "Battaglia2012"
   image_size_pixels: float
       num pixels to each side of center; end shape of submap will be 
       (image_size_pixels, image_size_pixels)
   pixel_size_arcmin: float
       size of each pixel in arcmin
   load_vars_dict: dict
       result of running the load_vars() function, which includes a dictionary of cosmological and experimental
       parameters
   alpha: float
       variable fixed by Battaglia et al 2012 to 1.0
   gamma: float
       variable fixed by Battaglia et al 2012 to -0.3
   R200_Mpc: None or float
       if None, will calculate the radius that corresponds to the mass M200, the redshift redshift_z,
       and the cosmology contained in load_vars_dict

   Return:
   ------
   y_map: array
       Compton-y submap with dimension (image_size_pixels, image_size_pixels)


.. py:function:: get_r200_angsize_and_c200(M200_SM, redshift_z, load_vars_dict, angsize_density=None)

   Parameters:
   ----------
   M200_SM: float
       the mass contained within R200, in units of solar masses
   redshift_z: float
       redshift of the cluster (unitless)
   load_vars_dict: dict
       must contain 'cosmo' (a FlatLambaCDM instance describing the background cosmology),
       'sigma8' (float, around 0.8), and 'ns' (float, around 0.96)
   angsize_density: None or str
       density measure at which to calculate the angular size, if desired. If `None`, will not
       calculate an angular size. Otherwise, use a valid choice as specified in `colossus.halo.mass_adv`
       such as `500c`

   Returns:
   -------
   M200_SM: float
       the mass contained within R200, in units of solar masses
   R200_Mpc: float
       the radius of the cluster at 200 times the critical density of the universe in Mpc
   c200: float
       concentration parameter


