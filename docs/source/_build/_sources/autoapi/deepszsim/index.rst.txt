deepszsim
=========

.. py:module:: deepszsim

.. autoapi-nested-parse::

   package for fast simulations of the Sunyaev-Zel'dovich effect from galaxy clusters



Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/deepszsim/dm_halo_dist/index
   /autoapi/deepszsim/filters/index
   /autoapi/deepszsim/io_params/index
   /autoapi/deepszsim/load_vars/index
   /autoapi/deepszsim/make_sz_cluster/index
   /autoapi/deepszsim/noise/index
   /autoapi/deepszsim/read_yaml/index
   /autoapi/deepszsim/simclusters/index
   /autoapi/deepszsim/simtools/index
   /autoapi/deepszsim/utils/index
   /autoapi/deepszsim/visualization/index


Classes
-------

.. autoapisummary::

   deepszsim.simulate_clusters


Functions
---------

.. autoapisummary::

   deepszsim.load_vars
   deepszsim.readh5


Package Contents
----------------

.. py:function:: load_vars(file_name='config_simACTDR5.yaml', file_dir=os.path.join(os.path.dirname(__file__), 'Settings'), survey_num: int = None, survey_name: str = None, survey_freq_val: int = None, cosmo_name: str = None, enforce_odd_pix: bool = True)

   Parameters
   ----------
   file_name: str
       name of a yaml file that specifies the variables that you want to simulate
   file_dir: str
       path to the yaml file named in `file_name`
   survey_num: None or int
       optional -- if there are multiple surveys, choose one by its position in the list
   survey_name: None or str
       optional -- if there are multiple surveys, choose one by its name
   survey_freq_val: None or int
       optional -- if a survey has multiple frequencies, choose a frequency by its value (in GHz)
   cosmo_name: None or str
       optional -- if there are multiple cosmologies, choose one by its name
   enforce_odd_pix: bool
       whether or not to enforce an odd number of pixels in the simulated image (defaults to true so that the
       central pixel has the maximal y-value

   Returns
   -------
   dict
       a dictionary that will enable you to simulate SZ clusters with a given cosmology and set of observational
       properties.



.. py:function:: readh5(fname, fdir=None)

   Parameters
   ----------
   fname: str
       name of the file you want to read (must include the suffix, eg '.h5' or '.hd5' or '.hdf5')
   fdir: None or str
       path to the directory that contains the file you want to read
   Returns
   -------
   dict
       dictionary that represents a single cluster (if `fname` represents a single cluster) or a nested set of
       clusters. Each cluster that is returned will itself have a dictionary with 'maps' and 'params' as keys,
       containing the output maps and the parameters that were used to make them, respectively


.. py:class:: simulate_clusters(M200=None, redshift_z=None, num_halos=None, halo_params_dict=None, R200_Mpc=None, profile='Battaglia2012', image_size_pixels=None, image_size_arcmin=None, pixel_size_arcmin=None, alpha=1.0, gamma=-0.3, load_vars_yaml=os.path.join(os.path.dirname(__file__), 'Settings', 'config_simACTDR5.yaml'), seed=None, tqverb=False)

   .. py:attribute:: clusters


   .. py:attribute:: profile
      :value: 'Battaglia2012'



   .. py:attribute:: image_size_pixels


   .. py:attribute:: image_size_arcmin


   .. py:attribute:: pixel_size_arcmin


   .. py:attribute:: beam_size_arcmin


   .. py:attribute:: cosmo


   .. py:attribute:: tqverb


   .. py:attribute:: id_list


   .. py:method:: get_y_maps()

      Returns
      -------
      np.ndarray(float)
          self._size many maps of the Compton `y` value, each of which is image_size_pixels x image_size_pixels in size



   .. py:method:: get_dT_maps()

      Returns
      -------
      np.ndarray(float)
          self._size many maps of the dT values in units of uK, each of which is image_size_pixels x
          image_size_pixels in size



   .. py:method:: get_T_maps(add_CMB=True, returnval=False)

      Parameters
      ----------
      add_CMB: bool
          whether or not to include the CMB contribution to the final map
      returnval: bool
          whether or not to return the T maps themselves or simply update internal attribute

      Returns
      -------
      np.ndarray(float)
          self._size many maps of the sky in units of uK, each of which is image_size_pixels x image_size_pixels in
          size



   .. py:method:: ith_T_map(i, add_CMB=True)

      Parameters
      ----------
      i: int
          the map you want to return
      add_CMB: bool
          whether or not to include the CMB contribution to the final map

      Returns
      -------
      np.ndarray(float)
          the ith map of the sky in units of uK, which is image_size_pixels x image_size_pixels in size



   .. py:method:: save_map(i=None, nest_h5=True, nest_name=None, savedir=os.path.join(os.path.dirname(__file__), 'outfiles'))

      Parameters
      ----------
      i: None or int
          the map you want to save, if you only want to save a single map
      nest_h5: bool
          whether or not to nest the clusters into a single h5 file, assuming that you are saving all of the
          clusters that you have calculated
      nest_name: None or str
          a name for the overall file if you are nesting them (otherwise, it will name it with the number of
          clusters plus the date plus a random string)
      savedir: str
          the path to the directory you want to save into



